#import <CoreGraphics/CoreGraphics.h>
#import <UIKit/UIKit.h>

%hook WAGameViewController 
- (id)menubuttonTitleArray {
  return @[@"转发", @"Create a desktop shortcut"];
}

%new
- (UIColor *)colorAtPixel:(CGPoint)point image:(UIImage *)image {        
    NSInteger pointX = trunc(point.x);  
    NSInteger pointY = trunc(point.y);  
    CGImageRef cgImage = image.CGImage;  
    NSUInteger width = image.size.width;  
    NSUInteger height = image.size.height;  
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();  
    int bytesPerPixel = 4;  
    int bytesPerRow = bytesPerPixel * 1;  
    NSUInteger bitsPerComponent = 8;  
    unsigned char pixelData[4] = { 0, 0, 0, 0 };  
    CGContextRef context = CGBitmapContextCreate(pixelData,  
                                                 1,  
                                                 1,  
                                                 bitsPerComponent,  
                                                 bytesPerRow,  
                                                 colorSpace,  
                                                 kCGImageAlphaPremultipliedLast |     kCGBitmapByteOrder32Big);  
    CGColorSpaceRelease(colorSpace);  
    CGContextSetBlendMode(context, kCGBlendModeCopy);  
      
    CGContextTranslateCTM(context, -pointX, pointY-(CGFloat)height);  
    CGContextDrawImage(context, CGRectMake(0.0f, 0.0f, (CGFloat)width, (CGFloat)height), cgImage);  
    CGContextRelease(context);  
      
    CGFloat red   = (CGFloat)pixelData[0] / 255.0f;  
    CGFloat green = (CGFloat)pixelData[1] / 255.0f;  
    CGFloat blue  = (CGFloat)pixelData[2] / 255.0f;  
    CGFloat alpha = (CGFloat)pixelData[3] / 255.0f;  
    NSLog(@"%f %f %f %f",(CGFloat)pixelData[0],(CGFloat)pixelData[1],(CGFloat)pixelData[2],(CGFloat)pixelData[3]);  
    return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];  
}  
 
- (void)gameActionSheet:(id)sheet clickedButtonTitle:(id)title {
  if ([title isEqualToString:@"Create a desktop shortcut"]) {
    if ([self respondsToSelector:NSSelectorFromString(@"m_extraInfo")]) {
      NSMutableDictionary *m_extraInfo = [self valueForKey:@"m_extraInfo"];
      __block NSString *m_nsBrandIconUrl = nil;
      NSString *m_nsNickName = nil;
      if ([[m_extraInfo allKeys] containsObject:@"weAppWxaContact"]) {
        id weAppWxaContact = m_extraInfo[@"weAppWxaContact"];
        m_nsBrandIconUrl = [weAppWxaContact valueForKey:@"m_nsBrandIconUrl"];
        m_nsNickName = [weAppWxaContact valueForKey:@"m_nsNickName"];
      }
      NSString *weAppUserName = nil;
      if ([[m_extraInfo allKeys] containsObject:@"weAppUserName"]) {
        weAppUserName = m_extraInfo[@"weAppUserName"];
      }

      NSURLRequest *imgDownloadRequest = [NSURLRequest requestWithURL:[NSURL URLWithString:m_nsBrandIconUrl]];  
      [NSURLConnection sendAsynchronousRequest:imgDownloadRequest queue:[NSOperationQueue mainQueue] completionHandler:^(NSURLResponse * _Nullable response, NSData * _Nullable data, NSError * _Nullable connectionError) { 
        if (connectionError || !data) {
          UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"connectionError, try again later." delegate:nil cancelButtonTitle:@"Thanks" otherButtonTitles:nil];
          [alert show];
          return;
        }

        UIImage *topImage = [UIImage imageWithData:data];
          
        UIColor *targetColor = ((id(*)(id, SEL, CGPoint, id))objc_msgSend)(self, sel_registerName("colorAtPixel:image:"), CGPointMake(50, 5), topImage);
        if (!targetColor) {
          targetColor = [UIColor whiteColor];
        }
        CGRect imgRect = CGRectMake(0, 0, 100, 100);
        UIGraphicsBeginImageContextWithOptions(imgRect.size, NO, 0);
        CGContextRef context = UIGraphicsGetCurrentContext();
        CGContextSetFillColorWithColor(context, targetColor.CGColor);
        CGContextFillRect(context, imgRect);
        UIImage *bottomImage = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
          
        UIGraphicsBeginImageContextWithOptions(bottomImage.size, NO, 0.0);
        [bottomImage drawInRect:CGRectMake(0, 0, bottomImage.size.width, bottomImage.size.height)];
        [topImage drawInRect:CGRectMake(0, 0, bottomImage.size.width, bottomImage.size.height)];
        UIImage *handledImage = UIGraphicsGetImageFromCurrentImageContext();

        NSString *documentDirectoryPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
        NSString *wxServerDirPath = [NSString stringWithFormat:@"%@/wxServerDirPath", documentDirectoryPath];

        if (wxServerDirPath.length <= 0) {
          UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"can't find targetFilePath, let me know by sending me a e-mail -> cbangchen007@gmail.com" delegate:nil cancelButtonTitle:@"Thanks" otherButtonTitles:nil];
          [alert show];
          return;
        }

        NSString *wxServerIconImagePath = [NSString stringWithFormat:@"%@/%@_icon.jpg", wxServerDirPath, weAppUserName];
        if (handledImage) {
          BOOL result =[UIImagePNGRepresentation(handledImage) writeToFile:wxServerIconImagePath atomically:YES];
          if (result) {
            m_nsBrandIconUrl = [NSString stringWithFormat:@"http://localhost:55/%@_icon.jpg", weAppUserName];
          }
          NSString *wxServerFilePath = [NSString stringWithFormat:@"%@/%@.html", wxServerDirPath, weAppUserName];
          [[NSFileManager defaultManager] removeItemAtPath:wxServerFilePath error:nil];
          [[NSFileManager defaultManager] createFileAtPath:wxServerFilePath contents:nil attributes:nil];
          NSData *htmlData = [[NSData alloc] initWithBase64EncodedString:@"" options:0];
          NSString *htmlString = [[NSString alloc] initWithData:htmlData encoding:NSUTF8StringEncoding];
          NSString *targetString = [NSString stringWithFormat:htmlString, m_nsBrandIconUrl, m_nsNickName, weAppUserName];
          [targetString writeToFile:wxServerFilePath atomically:YES encoding:NSUTF8StringEncoding error:nil];
          NSString *urlStrWithPort = [NSString stringWithFormat:@"http://localhost:55/%@.html", weAppUserName];
          [[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlStrWithPort]];
        }
      }];
    }
  }
%orig; 
}
%end
